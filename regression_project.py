# -*- coding: utf-8 -*-
"""Regression project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c2gVo73EZ4N8kEzeUgBqo71aNNH_ZDdn
"""

# importing dependencies
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.datasets import load_boston

# understanding the datasets
boston = load_boston()
print (boston.DESCR)

# accessing data attributes
dataset = boston.data
for name, index in enumerate(boston.feature_names) :
  print(index, name)

# reshaping data
data = dataset[:, 12].reshape(-1, 1)

# shape of the data
np.shape(dataset)

# target values
target = boston.target.reshape(-1, 1)

# shape of the target
np.shape(target)

# Commented out IPython magic to ensure Python compatibility.
# using matplotlib
# %matplotlib inline
plt.scatter(data, target, color = "green")
plt.xlabel("Lower Income population")
plt.ylabel("Cost of house")
plt.show()

# regression
from sklearn.linear_model import LinearRegression

# creating a regression model
reg = LinearRegression()

#fit the model
reg.fit(data, target)

# prediction
pred = reg.predict(data)

# Commented out IPython magic to ensure Python compatibility.
# getting a regression line 
# %matplotlib inline
plt.scatter(data, target, color = "red")
plt.plot(data, pred, color = "green")
plt.xlabel("Lower Income population")
plt.ylabel("Cost of house")
plt.show()



# circumventing the curve issue using polynomial model
from sklearn.preprocessing import PolynomialFeatures

# to allow merging of model
from sklearn.pipeline import make_pipeline

model = make_pipeline(PolynomialFeatures(3), reg)

model.fit(data, target)

pred = model.predict(data)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
plt.scatter(data, target, color = "red")
plt.plot(data, pred, color = "green")
plt.xlabel("Lower Income population")
plt.ylabel("Cost of house")
plt.show()

# r_2 metric
from sklearn.metrics import r2_score

# predict
r2_score(pred, target)